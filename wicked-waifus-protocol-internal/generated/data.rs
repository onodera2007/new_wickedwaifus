// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VectorData {
    #[prost(float, tag = "1")]
    pub x: f32,
    #[prost(float, tag = "2")]
    pub y: f32,
    #[prost(float, tag = "3")]
    pub z: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransformData {
    #[prost(message, optional, tag = "1")]
    pub position: ::core::option::Option<VectorData>,
    #[prost(message, optional, tag = "2")]
    pub rotation: ::core::option::Option<VectorData>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerBasicData {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub sex: i32,
    #[prost(int32, tag = "4")]
    pub level: i32,
    #[prost(int32, tag = "5")]
    pub exp: i32,
    #[prost(int32, tag = "6")]
    pub head_photo: i32,
    #[prost(int32, tag = "7")]
    pub head_frame: i32,
    #[prost(int32, tag = "8")]
    pub cur_map_id: i32,
    #[prost(int32, repeated, tag = "9")]
    pub role_show_list: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RoleSkillNodeData {
    #[prost(int32, tag = "1")]
    pub node_id: i32,
    #[prost(bool, tag = "2")]
    pub is_active: bool,
    #[prost(int32, tag = "3")]
    pub skill_id: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RoleStats {
    /// Current HP
    #[prost(int32, tag = "1")]
    pub hp: i32,
    /// Ultimate energy
    #[prost(int32, tag = "2")]
    pub energy: i32,
    /// Forte
    #[prost(int32, tag = "3")]
    pub special_energy_1: i32,
    /// Forte
    #[prost(int32, tag = "4")]
    pub special_energy_2: i32,
    /// Forte
    #[prost(int32, tag = "5")]
    pub special_energy_3: i32,
    /// Forte
    #[prost(int32, tag = "6")]
    pub special_energy_4: i32,
    /// Concerto
    #[prost(int32, tag = "7")]
    pub element_energy: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoleData {
    #[prost(int32, tag = "1")]
    pub role_id: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub level: i32,
    #[prost(int32, tag = "4")]
    pub exp: i32,
    #[prost(int32, tag = "5")]
    pub breakthrough: i32,
    #[prost(map = "int32, int32", tag = "6")]
    pub skill_map: ::std::collections::HashMap<i32, i32>,
    #[prost(map = "int32, int32", tag = "7")]
    pub phantom_map: ::std::collections::HashMap<i32, i32>,
    #[prost(int32, tag = "8")]
    pub star: i32,
    #[prost(int32, tag = "9")]
    pub favor: i32,
    #[prost(uint32, tag = "10")]
    pub create_time: u32,
    #[prost(int32, tag = "11")]
    pub cur_model: i32,
    #[prost(int32, repeated, tag = "12")]
    pub models: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "13")]
    pub skill_node_state: ::prost::alloc::vec::Vec<RoleSkillNodeData>,
    #[prost(int32, tag = "14")]
    pub resonant_chain_group_index: i32,
    #[prost(int32, tag = "15")]
    pub equip_weapon: i32,
    #[prost(int32, tag = "16")]
    pub skin_id: i32,
    #[prost(message, optional, tag = "17")]
    pub stats: ::core::option::Option<RoleStats>,
    #[prost(int32, tag = "18")]
    pub favor_level: i32,
    #[prost(int32, tag = "19")]
    pub favor_exp: i32,
    #[prost(int32, tag = "20")]
    pub wing_skin_id: i32,
    #[prost(int32, tag = "21")]
    pub fly_skin_id: i32,
    #[prost(int32, tag = "22")]
    pub weapon_skin_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RoleFormationData {
    #[prost(int32, tag = "1")]
    pub formation_id: i32,
    #[prost(int32, tag = "2")]
    pub cur_role: i32,
    #[prost(int32, repeated, tag = "3")]
    pub role_id_list: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, tag = "4")]
    pub is_current: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerRoleData {
    #[prost(message, repeated, tag = "1")]
    pub role_list: ::prost::alloc::vec::Vec<RoleData>,
    #[prost(map = "int32, message", tag = "2")]
    pub role_formation_list: ::std::collections::HashMap<i32, RoleFormationData>,
    #[prost(int32, tag = "3")]
    pub cur_formation_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLocationData {
    #[prost(int32, tag = "1")]
    pub instance_id: i32,
    #[prost(message, optional, tag = "2")]
    pub position: ::core::option::Option<TransformData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerFuncData {
    #[prost(map = "int32, int32", tag = "1")]
    pub func_map: ::std::collections::HashMap<i32, i32>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerExploreToolsData {
    #[prost(int32, repeated, tag = "1")]
    pub unlocked_skill_list: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, tag = "2")]
    pub active_skill_id: i32,
    #[prost(int32, repeated, tag = "3")]
    pub roulette: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerChatHistoryData {
    #[prost(int32, tag = "1")]
    pub sender: i32,
    #[prost(int32, tag = "2")]
    pub receiver: i32,
    #[prost(int32, tag = "3")]
    pub content_type: i32,
    #[prost(string, tag = "4")]
    pub msg_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub original_message: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub filtered_message: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub offline_message: bool,
    #[prost(int64, tag = "8")]
    pub utc_time: i64,
    #[prost(string, tag = "9")]
    pub psn_account_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerChatRoomData {
    #[prost(message, repeated, tag = "1")]
    pub history: ::prost::alloc::vec::Vec<PlayerChatHistoryData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerChatData {
    #[prost(map = "int32, message", tag = "1")]
    pub rooms: ::std::collections::HashMap<i32, PlayerChatRoomData>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerGuidesData {
    #[prost(int32, repeated, tag = "1")]
    pub started_guides: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "2")]
    pub finished_guides: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerAdviceData {
    #[prost(bool, tag = "1")]
    pub is_show: bool,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerAdventureTaskStatusData {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(int32, tag = "2")]
    pub state: i32,
    #[prost(int32, tag = "3")]
    pub progress: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerAdventureGlobalStatusData {
    #[prost(message, repeated, tag = "1")]
    pub status: ::prost::alloc::vec::Vec<PlayerAdventureTaskStatusData>,
    #[prost(int32, tag = "2")]
    pub now_chapter: i32,
    #[prost(int32, tag = "3")]
    pub received_chapter: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerAdventureStatusData {
    #[prost(message, repeated, tag = "1")]
    pub status: ::prost::alloc::vec::Vec<PlayerAdventureGlobalStatusData>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerInventoryWeaponData {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(int32, tag = "2")]
    pub func_value: i32,
    #[prost(int32, tag = "3")]
    pub level: i32,
    #[prost(int32, tag = "4")]
    pub exp: i32,
    #[prost(int32, tag = "5")]
    pub breach: i32,
    #[prost(int32, tag = "6")]
    pub reson_level: i32,
    #[prost(int32, tag = "7")]
    pub role_id: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PhantomPropInfo {
    #[prost(int32, tag = "1")]
    pub prop_id: i32,
    #[prost(int32, tag = "2")]
    pub value: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerInventoryPhantomData {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(int32, tag = "2")]
    pub func_value: i32,
    #[prost(int32, tag = "3")]
    pub level: i32,
    #[prost(int32, tag = "4")]
    pub exp: i32,
    /// TODO: repeated vs map
    #[prost(message, repeated, tag = "5")]
    pub main_prop: ::prost::alloc::vec::Vec<PhantomPropInfo>,
    /// TODO: repeated vs map
    #[prost(message, repeated, tag = "6")]
    pub sub_prop: ::prost::alloc::vec::Vec<PhantomPropInfo>,
    #[prost(int32, tag = "7")]
    pub fetter_group_id: i32,
    #[prost(int32, tag = "8")]
    pub skin_id: i32,
    #[prost(int32, tag = "9")]
    pub role_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerInventoryPhantomLoadoutData {
    #[prost(int32, tag = "1")]
    pub name: i32,
    /// Key is position (0,1,2,3,4), value is incr_id
    #[prost(map = "int32, int32", tag = "2")]
    pub incr_id: ::std::collections::HashMap<i32, i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerInventoryData {
    #[prost(map = "int32, int32", tag = "1")]
    pub items: ::std::collections::HashMap<i32, i32>,
    /// Key is incr_id
    #[prost(map = "int32, message", tag = "2")]
    pub weapons: ::std::collections::HashMap<i32, PlayerInventoryWeaponData>,
    /// Key is incr_id
    #[prost(map = "int32, message", tag = "3")]
    pub echoes: ::std::collections::HashMap<i32, PlayerInventoryPhantomData>,
    /// Key is loadout number
    #[prost(map = "int32, message", tag = "4")]
    pub echo_presets: ::std::collections::HashMap<
        i32,
        PlayerInventoryPhantomLoadoutData,
    >,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerTeleportData {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(int32, tag = "2")]
    pub map_id: i32,
    #[prost(int64, tag = "3")]
    pub entity_config_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerTeleportsData {
    #[prost(message, repeated, tag = "1")]
    pub teleport_data: ::prost::alloc::vec::Vec<PlayerTeleportData>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerTutorialData {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(uint32, tag = "2")]
    pub create_time: u32,
    #[prost(bool, tag = "3")]
    pub get_award: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerTutorialsData {
    #[prost(message, repeated, tag = "1")]
    pub tutorials: ::prost::alloc::vec::Vec<PlayerTutorialData>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerMapTraceData {
    #[prost(int32, repeated, tag = "1")]
    pub traces: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerMonthCardData {
    #[prost(int32, tag = "1")]
    pub days: i32,
    #[prost(int32, tag = "2")]
    pub last_received_day: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerMcElementData {
    #[prost(enumeration = "PlayerMcElementType", repeated, tag = "1")]
    pub unlocked_elements: ::prost::alloc::vec::Vec<i32>,
    #[prost(enumeration = "PlayerMcElementType", tag = "2")]
    pub current_element: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PlayerUnlockedSkinsData {
    #[prost(int32, repeated, tag = "1")]
    pub role_skins: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "2")]
    pub weapon_skins: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "3")]
    pub fly_skins: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "4")]
    pub wing_skins: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "5")]
    pub echo_skins: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerSaveData {
    #[prost(message, optional, tag = "1")]
    pub basic_data: ::core::option::Option<PlayerBasicData>,
    #[prost(message, optional, tag = "2")]
    pub role_data: ::core::option::Option<PlayerRoleData>,
    #[prost(message, optional, tag = "3")]
    pub location_data: ::core::option::Option<PlayerLocationData>,
    #[prost(message, optional, tag = "4")]
    pub func_data: ::core::option::Option<PlayerFuncData>,
    #[prost(message, optional, tag = "5")]
    pub explore_tools_data: ::core::option::Option<PlayerExploreToolsData>,
    #[prost(message, optional, tag = "6")]
    pub chat_data: ::core::option::Option<PlayerChatData>,
    #[prost(message, optional, tag = "7")]
    pub guides: ::core::option::Option<PlayerGuidesData>,
    #[prost(message, optional, tag = "8")]
    pub advise: ::core::option::Option<PlayerAdviceData>,
    #[prost(message, optional, tag = "9")]
    pub adventure_status: ::core::option::Option<PlayerAdventureStatusData>,
    #[prost(message, optional, tag = "10")]
    pub inventory: ::core::option::Option<PlayerInventoryData>,
    #[prost(message, optional, tag = "11")]
    pub teleports: ::core::option::Option<PlayerTeleportsData>,
    #[prost(message, optional, tag = "12")]
    pub tutorials: ::core::option::Option<PlayerTutorialsData>,
    #[prost(message, optional, tag = "13")]
    pub map_trace: ::core::option::Option<PlayerMapTraceData>,
    #[prost(message, optional, tag = "14")]
    pub month_card: ::core::option::Option<PlayerMonthCardData>,
    #[prost(message, optional, tag = "15")]
    pub mc_element: ::core::option::Option<PlayerMcElementData>,
    #[prost(message, optional, tag = "16")]
    pub unlocked_skins: ::core::option::Option<PlayerUnlockedSkinsData>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayerMcElementType {
    Glacio = 0,
    Fusion = 1,
    Electro = 2,
    Aero = 3,
    Spectro = 4,
    Havoc = 5,
}
impl PlayerMcElementType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Glacio => "Glacio",
            Self::Fusion => "Fusion",
            Self::Electro => "Electro",
            Self::Aero => "Aero",
            Self::Spectro => "Spectro",
            Self::Havoc => "Havoc",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Glacio" => Some(Self::Glacio),
            "Fusion" => Some(Self::Fusion),
            "Electro" => Some(Self::Electro),
            "Aero" => Some(Self::Aero),
            "Spectro" => Some(Self::Spectro),
            "Havoc" => Some(Self::Havoc),
            _ => None,
        }
    }
}
